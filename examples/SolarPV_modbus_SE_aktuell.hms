! SolarPV_modbus_SE_aktuell.hms - aktuelle PV-Werte auslesen
!
! (c) jensDev - license LGPL3

! IP/hostname & Port separated by blank
string ipPortSolarEdge = "target 502";

dom.GetObject("CUxD.CUX2801001:6.CMD_SETS").State("tclsh /usr/local/addons/semon_ccu/bin/modbus_SE_reader.tcl " # ipPortSolarEdge # " Inverter Meter HMSCRIPT");
dom.GetObject("CUxD.CUX2801001:6.CMD_QUERY_RET").State(1);
var daten = dom.GetObject("CUxD.CUX2801001:6.CMD_RETS").State();

integer einspeisung;
integer verbrauch;
integer pvLeistung;
string event;
string temp;
string state;

string tuple;
foreach(tuple, daten.Split("|")) 
{
   string item = tuple.StrValueByIndex("=", 0);
   string value = tuple.StrValueByIndex("=", 1);
   if (item == "inverterData_Evt1") {
      event = tuple.StrValueByIndex("=", 1);
   }
   if (item == "inverterData_St") {
      state = tuple.StrValueByIndex("=", 1);
   }
   if (item == "inverterData_W__W") {
      pvLeistung = tuple.StrValueByIndex("=", 1).ToInteger();
   }
   if (item == "inverterData_TmpSnk__C") {
      temp = tuple.StrValueByIndex("=", 1);
   }
   if (item == "meterData_W__W") {
      integer value = tuple.StrValueByIndex("=", 1).ToInteger();
      ! Messwert ist negativ bei Strombezug aus dem Netz - positiv bei Einspeisung
      verbrauch = pvLeistung - value;
      if (value > 0) {
         einspeisung = value;
      } else {
         einspeisung = 0;
      }
   } 
}
if (einspeisung > 0) {
   state = state # " - Einspeisung aktiv";
} else {
   state = state # " - kein Überschuss";
}
string status = state # " - Kühler " # temp # "°C - Fehler: " # event;
!WriteLine("Einspeisung: " # einspeisung # "W");
!WriteLine("Verbrauch: " # verbrauch # "W");
!WriteLine("PV-Erzeugung: " # pvLeistung # "W");
!WriteLine("Status: " # status);
(dom.GetObject(ID_SYSTEM_VARIABLES)).Get("SolarPV.SV_Einspeisung").State(einspeisung); 
(dom.GetObject(ID_SYSTEM_VARIABLES)).Get("SolarPV.SV_Verbrauch").State(verbrauch); 
(dom.GetObject(ID_SYSTEM_VARIABLES)).Get("SolarPV.SV_WR_Leistung").State(pvLeistung); 
(dom.GetObject(ID_SYSTEM_VARIABLES)).Get("SolarPV.SV_WR_Status").State(status); 
! Loggen für CUxD-Highcharts
(dom.GetObject("CUxD.CUX2801001:1.LOGIT")).State("SolarPV_SV_Einspeisung;"#einspeisung);
(dom.GetObject("CUxD.CUX2801001:1.LOGIT")).State("SolarPV_SV_Verbrauch;"#verbrauch);
(dom.GetObject("CUxD.CUX2801001:1.LOGIT")).State("SolarPV_SV_WR_Leistung;"#pvLeistung);
